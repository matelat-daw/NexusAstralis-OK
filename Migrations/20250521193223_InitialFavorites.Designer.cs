// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexusAstralis.Data;

#nullable disable

namespace NexusAstralis.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250521193223_InitialFavorites")]
    partial class InitialFavorites
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4b5c011e-6fc5-40e9-bc73-1b9c106f2461",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "43b86b23-88ce-45b2-aa32-2e12f6997b9c",
                            Name = "Premium",
                            NormalizedName = "PREMIUM"
                        },
                        new
                        {
                            Id = "f354b3e1-1d17-4b58-b0ea-a5567e75e7bd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e3c4d687-68f2-4887-b3fc-b3322dc4a2de",
                            RoleId = "f354b3e1-1d17-4b58-b0ea-a5567e75e7bd"
                        },
                        new
                        {
                            UserId = "45dc1c95-a843-459b-977c-bb16bb46fde8",
                            RoleId = "f354b3e1-1d17-4b58-b0ea-a5567e75e7bd"
                        },
                        new
                        {
                            UserId = "66ba44e5-d813-4add-ab10-39c46036692d",
                            RoleId = "f354b3e1-1d17-4b58-b0ea-a5567e75e7bd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NexusAstralis.Models.User.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConstellationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserNick")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("NexusAstralis.Models.User.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstellationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("NexusAstralis.Models.User.NexusUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Bday")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Nick")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PublicProfile")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname1")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Surname2")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e3c4d687-68f2-4887-b3fc-b3322dc4a2de",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(1995, 7, 15),
                            ConcurrencyStamp = "5d164cce-1eee-4fa1-a3de-410ea2657638",
                            Email = "ledesma.leslie@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Leslie Ann",
                            Nick = "Mae",
                            NormalizedEmail = "LEDESMA.LESLIE@GMAIL.COM",
                            NormalizedUserName = "LEDESMA.LESLIE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEpqHHprGkmag4ZxYdLYUPxGOjT/wKfq1z4iRX29eiHGl1+bZ4ogxz4SlFBhVrB94A==",
                            PhoneNumber = "644388160",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/Mae/Leslie.jpg",
                            PublicProfile = false,
                            SecurityStamp = "8b5129ba-871e-4c8a-bdfe-a5aa0a331b03",
                            Surname1 = "Ledesma",
                            Surname2 = "Lara",
                            TwoFactorEnabled = false,
                            UserName = "ledesma.leslie@gmail.com"
                        },
                        new
                        {
                            Id = "45dc1c95-a843-459b-977c-bb16bb46fde8",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(2001, 1, 3),
                            ConcurrencyStamp = "fc802ad9-e724-49d6-97be-1b69f1948fa7",
                            Email = "patrickmurphygon@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Patrick Edward",
                            Nick = "PatrokWanzana",
                            NormalizedEmail = "PATRICKMURPHYGON@GMAIL.COM",
                            NormalizedUserName = "PATRICKMURPHYGON@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELhVKQm9/zs8mjM90Q5a4TrPFjQocxbZucuIpTZeRjRgmoK4FqpoDCx/4wFY9qbQlg==",
                            PhoneNumber = "634547833",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/Patrokwanzana/Patrick.jpg",
                            PublicProfile = false,
                            SecurityStamp = "3b68efd3-1042-4813-ac15-b549fa218ba6",
                            Surname1 = "Murphy",
                            Surname2 = "González",
                            TwoFactorEnabled = false,
                            UserName = "patrickmurphygon@gmail.com"
                        },
                        new
                        {
                            Id = "66ba44e5-d813-4add-ab10-39c46036692d",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(1968, 4, 5),
                            ConcurrencyStamp = "0b93881d-2c5e-4841-8a3f-3dc0b7280c8a",
                            Email = "cesarmatelat@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "César Osvaldo",
                            Nick = "Orions@68",
                            NormalizedEmail = "CESARMATELAT@GMAIL.COM",
                            NormalizedUserName = "CESARMATELAT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAhf04WJWunpQ88W4LTnJqGuw+7X236/XcXIucAuMHGpx1UXh0kuPUb1PpzhFIDsKw==",
                            PhoneNumber = "664774821",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/Orions@68/profile.jpg",
                            PublicProfile = false,
                            SecurityStamp = "9266cb0a-541c-4748-8862-c6c350ba9ecb",
                            Surname1 = "Matelat",
                            Surname2 = "Borneo",
                            TwoFactorEnabled = false,
                            UserName = "cesarmatelat@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NexusAstralis.Models.User.Comments", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NexusAstralis.Models.User.Favorite", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NexusAstralis.Models.User.NexusUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
