// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexusAstralis.Data;

#nullable disable

namespace NexusAstralis.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250518123649_InitialUsers")]
    partial class InitialUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "52c2d3b1-5cee-4355-ad1e-a50a41cb20c8",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "cfcb8b56-67f6-4732-b1e8-3f05855f880c",
                            Name = "Premium",
                            NormalizedName = "PREMIUM"
                        },
                        new
                        {
                            Id = "f0d74b09-3e58-4b15-a1c8-34bd189a8531",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e656ebbd-c5cd-4f64-b5e9-3584b0361ec0",
                            RoleId = "f0d74b09-3e58-4b15-a1c8-34bd189a8531"
                        },
                        new
                        {
                            UserId = "3a9f5e5a-a46f-4016-94b3-b2db662e6540",
                            RoleId = "f0d74b09-3e58-4b15-a1c8-34bd189a8531"
                        },
                        new
                        {
                            UserId = "fa0d1124-2c52-4e36-96e4-6eac818cfef5",
                            RoleId = "f0d74b09-3e58-4b15-a1c8-34bd189a8531"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NexusAstralis.Models.User.Favorites", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConstellationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ConstellationId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("NexusAstralis.Models.User.NexusUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Bday")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Nick")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PublicProfile")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname1")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Surname2")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e656ebbd-c5cd-4f64-b5e9-3584b0361ec0",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(1995, 7, 15),
                            ConcurrencyStamp = "3fce5c56-6a36-41f4-ac8e-c0266f11e48b",
                            Email = "ledesma.leslie@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Leslie Ann",
                            Nick = "Mae",
                            NormalizedEmail = "LEDESMA.LESLIE@GMAIL.COM",
                            NormalizedUserName = "LEDESMA.LESLIE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOJX7ckV9r9Bxfxa9X4omRcPiEcvY6GGPL5L4flt4UAbkzed1KpSYzYR262JGShnDA==",
                            PhoneNumber = "644388160",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/Mae/Leslie.jpg",
                            PublicProfile = false,
                            SecurityStamp = "453c64ae-8aee-4944-99fc-d7902eb761c9",
                            Surname1 = "Ledesma",
                            Surname2 = "Lara",
                            TwoFactorEnabled = false,
                            UserName = "ledesma.leslie@gmail.com"
                        },
                        new
                        {
                            Id = "3a9f5e5a-a46f-4016-94b3-b2db662e6540",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(2001, 1, 3),
                            ConcurrencyStamp = "b781c472-9abc-4d4d-96bb-7b619ca9bc4b",
                            Email = "patrickmurphygon@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Patrick Edward",
                            Nick = "PatrokWanzana",
                            NormalizedEmail = "PATRICKMURPHYGON@GMAIL.COM",
                            NormalizedUserName = "PATRICKMURPHYGON@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC6gZZgsMfpsfKonOAJcVLv7GU72qCClN+5s2xlGLqP0PA7hxctjDOmDzMuTQrEweA==",
                            PhoneNumber = "634547833",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/Patrokwanzana/Patrick.jpg",
                            PublicProfile = false,
                            SecurityStamp = "c327a1cb-dcc8-4d4b-8df1-92f430a401d4",
                            Surname1 = "Murphy",
                            Surname2 = "González",
                            TwoFactorEnabled = false,
                            UserName = "patrickmurphygon@gmail.com"
                        },
                        new
                        {
                            Id = "fa0d1124-2c52-4e36-96e4-6eac818cfef5",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(1968, 4, 5),
                            ConcurrencyStamp = "8c029716-99d8-4c44-be07-cdfede1a6fad",
                            Email = "cesarmatelat@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "César Osvaldo",
                            Nick = "Orions@68",
                            NormalizedEmail = "CESARMATELAT@GMAIL.COM",
                            NormalizedUserName = "CESARMATELAT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEezH6THosm0nIFzBUNIjV5X3ux8qrE9Z0GNH88AqdlgRckZcQ7DsdIVxTSMzoB+zA==",
                            PhoneNumber = "664774821",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/Orions@68/profile.jpg",
                            PublicProfile = false,
                            SecurityStamp = "8d98ad82-3304-40f3-8397-0f05f2a5a74c",
                            Surname1 = "Matelat",
                            Surname2 = "Borneo",
                            TwoFactorEnabled = false,
                            UserName = "cesarmatelat@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NexusAstralis.Models.User.Favorites", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NexusAstralis.Models.User.NexusUser", b =>
                {
                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
