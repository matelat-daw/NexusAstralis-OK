// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexusAstralis.Data;

#nullable disable

namespace NexusAstralis.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250520213913_InitialUsers")]
    partial class InitialUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3f01bc4c-58fb-4115-a7b5-f40c5556e08a",
                            Name = "Basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "addd5b19-cf5d-4541-b3ba-69cc25231066",
                            Name = "Premium",
                            NormalizedName = "PREMIUM"
                        },
                        new
                        {
                            Id = "0f7c852c-cdcd-4124-8d4b-479103876bd7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0315f6dd-7619-4f64-ac56-a2781ad70942",
                            RoleId = "0f7c852c-cdcd-4124-8d4b-479103876bd7"
                        },
                        new
                        {
                            UserId = "64da4748-ba5e-4c35-93ef-9e6f1728f0aa",
                            RoleId = "0f7c852c-cdcd-4124-8d4b-479103876bd7"
                        },
                        new
                        {
                            UserId = "9d847551-dd45-4f2f-a0d1-2525043bd5db",
                            RoleId = "0f7c852c-cdcd-4124-8d4b-479103876bd7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NexusAstralis.Models.User.FavoriteCons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstellationId")
                        .HasColumnType("int");

                    b.Property<string>("NexusUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NexusUserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("NexusAstralis.Models.User.NexusUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Bday")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Nick")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PublicProfile")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname1")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("Surname2")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Nick")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0315f6dd-7619-4f64-ac56-a2781ad70942",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(1995, 7, 15),
                            ConcurrencyStamp = "392a7b02-abde-44aa-9e6a-13674a6390d9",
                            Email = "ledesma.leslie@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Leslie Ann",
                            Nick = "Mae",
                            NormalizedEmail = "LEDESMA.LESLIE@GMAIL.COM",
                            NormalizedUserName = "LEDESMA.LESLIE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBV+lI2zw9q3+aXRIYV7L/tRzlh1pHb+bbZwArTMXfUH1w/sYNHQZf/dpC6+h2pEFA==",
                            PhoneNumber = "644388160",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/Mae/Leslie.jpg",
                            PublicProfile = false,
                            SecurityStamp = "f83a3073-f77c-45bf-b268-01f19912f8ea",
                            Surname1 = "Ledesma",
                            Surname2 = "Lara",
                            TwoFactorEnabled = false,
                            UserName = "ledesma.leslie@gmail.com"
                        },
                        new
                        {
                            Id = "64da4748-ba5e-4c35-93ef-9e6f1728f0aa",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(2001, 1, 3),
                            ConcurrencyStamp = "e0f19457-e3e2-4c51-8f75-b3d596718cfe",
                            Email = "patrickmurphygon@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Patrick Edward",
                            Nick = "PatrokWanzana",
                            NormalizedEmail = "PATRICKMURPHYGON@GMAIL.COM",
                            NormalizedUserName = "PATRICKMURPHYGON@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBzOlPhT9gEuujHFUhj49zekL8z9wpsk2AAWKhx68CmqjmYwNt1zVI6Kn4ckikC7oA==",
                            PhoneNumber = "634547833",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/Patrokwanzana/Patrick.jpg",
                            PublicProfile = false,
                            SecurityStamp = "3019317c-2504-42a3-a7e8-855857b9a9ac",
                            Surname1 = "Murphy",
                            Surname2 = "González",
                            TwoFactorEnabled = false,
                            UserName = "patrickmurphygon@gmail.com"
                        },
                        new
                        {
                            Id = "9d847551-dd45-4f2f-a0d1-2525043bd5db",
                            AccessFailedCount = 0,
                            Bday = new DateOnly(1968, 4, 5),
                            ConcurrencyStamp = "9a7ce0eb-4401-425b-a0ad-aab7d2baa47e",
                            Email = "cesarmatelat@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "César Osvaldo",
                            Nick = "Orions@68",
                            NormalizedEmail = "CESARMATELAT@GMAIL.COM",
                            NormalizedUserName = "CESARMATELAT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECO/+pkaGzk/YY4yrkOVIiNcpjhqe0tQ/EqE8X91+AoSqpbZV3Vj5yP2HxCdMhKAYQ==",
                            PhoneNumber = "664774821",
                            PhoneNumberConfirmed = false,
                            ProfileImage = "/imgs/profile/Orions@68/profile.jpg",
                            PublicProfile = false,
                            SecurityStamp = "1d812cd3-2b6e-4c35-b542-a74d6018a22c",
                            Surname1 = "Matelat",
                            Surname2 = "Borneo",
                            TwoFactorEnabled = false,
                            UserName = "cesarmatelat@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NexusAstralis.Models.User.FavoriteCons", b =>
                {
                    b.HasOne("NexusAstralis.Models.User.NexusUser", null)
                        .WithMany("FavoriteCons")
                        .HasForeignKey("NexusUserId");
                });

            modelBuilder.Entity("NexusAstralis.Models.User.NexusUser", b =>
                {
                    b.Navigation("FavoriteCons");
                });
#pragma warning restore 612, 618
        }
    }
}
